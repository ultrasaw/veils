name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Reduce CI load by testing nightly only on Ubuntu
          - os: windows-latest
            rust: nightly
          - os: macOS-latest
            rust: nightly

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check

    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build library
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Run integration tests
      run: cargo test --test integration_tests --verbose

    - name: Test with all features
      run: cargo test --all-features --verbose

    - name: Build documentation
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo doc --no-deps --all-features

  sanity-check:
    name: Sanity Check - Deterministic Results
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-sanity-${{ hashFiles('**/Cargo.lock') }}

    - name: Run sanity check tests
      run: |
        echo "Running deterministic behavior tests..."
        cargo test test_deterministic_behavior --verbose
        
        echo "Running perfect reconstruction tests..."
        cargo test test_all_signals_perfect_reconstruction --verbose
        
        echo "Running FFT mode tests..."
        cargo test test_different_fft_modes --verbose

    - name: Verify test data consistency
      run: |
        echo "Testing that the same inputs always produce identical outputs..."
        for i in {1..5}; do
          echo "Run $i:"
          cargo test test_perfect_reconstruction_impulse --verbose -- --nocapture
        done

  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: |
        echo "Running performance benchmarks..."
        cargo test --release test_all_signals_perfect_reconstruction --verbose -- --nocapture

  publish-check:
    name: Publish Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-publish-${{ hashFiles('**/Cargo.lock') }}

    - name: Check if crate can be published
      run: cargo publish --dry-run

    - name: Verify package contents
      run: |
        cargo package --list
        echo "Checking package size..."
        cargo package 2>&1 | grep "Packaged"
